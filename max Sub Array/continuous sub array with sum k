Given an unsorted array A of size N of non-negative integers, find a continuous sub-array which adds to a given number S.

#include <iostream>
#include <map>
using namespace std;

int main() 
{
    int t;
    cin>>t;
    for(int k=0;k<t;k++)
    {
        int n,sum_req;
        cin>>n>>sum_req;
        int arr[n];
        for(int i=0;i<n;i++)
        {
            cin>>arr[i];
        }
        int curr_sum=0;
        int left=0,temp=0;
        for(int i=0;i<n;i++)
        {
            curr_sum+=arr[i];
            while(curr_sum > sum_req)
            {
                curr_sum-=arr[left];
                left++;
            }
            if(curr_sum == sum_req)
            {
                cout<<left+1<<" "<<i+1<<endl;
                temp=1;
                break;
            }
        }
        if(temp == 0)
        {
            cout<<"-1"<<endl;
        }
    }
	//code
	return 0;
}

find the total number of continuous subarrays whose sum equals to k.

int subUtil(vector<int>nums,int k)
    {
        int currsum=0,res=0;
        map<int,int> s;
        for(int i=0;i<nums.size();i++)
        {
            currsum+=nums[i];
            if(currsum == k)
                res++;
            if(s.find(currsum-k) != s.end())
                res+=s[currsum-k];
            s[currsum]++;
            
        }
        return res;
    }

