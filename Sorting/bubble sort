Time complexity: O(n^2)

Bubble sort consists of n rounds. 
On each round, the algorithm iterates through the elements of the array.
In ith iteration, ith largest element will go to its position.
After k rounds, the k largest elements will be in the correct positions.
On each round, the algorithm iterates through the elements of the array. 
Whenever two consecutive elements are found that are not in correct order, the algorithm swaps them. 
Bubble sort algorithm that always swaps consecutive elements in the array

The following code implements the algorithm:
n: no of elements in array
a: array of numbers to be sorted
for(int i=0;i<n;i++)
{
	for(int j=i;j<n-1;j++)
	{
		if(a[j] > a[j+1])
		{
			swap(a[j],a[j+1]);
		}
	}
}

Example: 1 3 8 2 9 2 5 6

First round of bubble sort swaps elements as follows:(i.e: i=0, j:0->n-1)
j=0: 1 3 8 2 9 2 5 6
j=1: 1 3 8 2 9 2 5 6
j=2: 1 3 2 8 9 2 5 6
j=3: 1 3 2 8 9 2 5 6
j=4: 1 3 2 8 2 9 5 6
j=5: 1 3 2 8 2 5 9 6
j=6: 1 3 2 8 2 5 6 9

In any round if there is no swap, then the array is sorted.
