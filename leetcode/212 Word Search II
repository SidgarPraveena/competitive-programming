class Solution {
    bool isvalid(int r, int c, bool visited[][105], int R,int C){
        if(r<0||r>=R||c<0||c>=C){return 0;}
        return visited[r][c]==0;
    }
    bool search_board(int r, int c, vector<vector<char>>& board, string& word, int ind, bool visited[][105]){
        if(ind>=word.size()){return 1;}
        if(!isvalid(r,c,visited,board.size(), board[0].size())){return 0;}
        if(board[r][c]!=word[ind]){return 0;}
        visited[r][c]=1;
            if(search_board(r+1,c,board,word,ind+1,visited)){
                return 1;
            }
            if(search_board(r,c+1,board,word,ind+1,visited)){
                return 1;
            }
            if(search_board(r-1,c,board,word,ind+1,visited)){
                return 1;
            }
            if(search_board(r,c-1,board,word,ind+1,visited)){
                return 1;
            }
        visited[r][c]=0;
        return 0;
    }
    
    bool findWords_util(vector<vector<char>> &board, string word)
    {
        for(int i=0; i<board.size(); i++)
        {
            for(int j=0; j<board[i].size();j++)
            {
                bool visited[105][105];
                memset(visited,0,sizeof(visited));
                if(search_board(i,j,board,word,0,visited))
                {
                    return true;
                }
            }
        }
        return false;
    }
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) 
    {
        vector<string> res;
        for(auto word: words)
        {
            if(findWords_util(board, word))
                res.push_back(word);
        }
        return res;
    }
};