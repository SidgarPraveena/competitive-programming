class Solution {
public:
    vector<int> dfs(vector<int> &res, vector<int> &nums, int p)
    {
        if(p == res.size())
        {
            return res;
        }
        if(res[p] != 0)
        {
            return dfs(res,nums,p+1);
        }
        for(int i = nums.size()-1; i > 0; i--)
        {
            int dist = i == 1 ? 0: i;
            if(nums[i] and dist + p < res.size() and res[dist+p] == 0)
            {
                nums[i] = 0;
                res[p] = res[dist+p] = i;
                auto r = dfs(res,nums,p+1);
                if(!r.empty())
                    return r;
                nums[i] = 1;
                res[p] = res[dist+p] = 0;
            }
        }
        return {};
    }
    vector<int> constructDistancedSequence(int n) 
    {
        vector<int> res(2*(n-1)+1, 0),nums(n+1,1);
        return dfs(res,nums,0);
    }
};