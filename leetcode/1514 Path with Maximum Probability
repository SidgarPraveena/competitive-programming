class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succ, int start, int end) 
    {
        unordered_map <int, vector<pair<int,double>>> graph;
        for (int i = 0; i < edges.size(); i++) 
        {
            graph[edges[i][0]].push_back(make_pair(edges[i][1], succ[i]));
            graph[edges[i][1]].push_back(make_pair(edges[i][0], succ[i]));
        }
        vector<double> r(n, 0);
        priority_queue<pair<int,double>, vector<pair<int,double>>, greater<pair<int,double>>> pq;
        pq.push({start, 1});
        while(!pq.empty())
        {
            int u = pq.top().first;
            double c = pq.top().second;
            pq.pop();
            for(int i = 0; i < graph[u].size(); i++)
            {
                int v = graph[u][i].first;
                double d = graph[u][i].second;
                if(r[v] < c*d)
                {
                    r[v] = c*d;
                    pq.push({v,c*d});
                }
            }
        }
        return r[end];
    }
};