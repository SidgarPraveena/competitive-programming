class Solution 
{
public:
    int ceil_index(int l,int r,int key,vector<int>temp)
{
    int m;
    while( (r-l) > 1)
    {
        m = l + (r-l)/2;
        if(temp[m] >= key)
            r = m;
        else
            l = m;
    }
    return r;
}
public:
    int lenUtil(vector<int>arr, int n)
    {
        vector<int>temp(n,0);
        int len=1;
        if(n == 1)
            return 1;
        temp[0]=arr[0];
        for(int i=1; i<n; i++)
        {
            if(arr[i] < temp[0])
                temp[0]=arr[i];
            else if(arr[i] > temp[len-1])
                temp[len++]=arr[i];
            else
            {
                temp[ceil_index(-1, len-1, arr[i],temp)]=arr[i];
            }
        }
        return len;
    }
public:
    int lengthOfLIS(vector<int>& nums) 
    {
        int res;
        if(nums.empty())
            return 0;
        else
        {
            int n=nums.size();
            res=lenUtil(nums,n);
        }
        return res;        
    }
};