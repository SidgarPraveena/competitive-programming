class Solution {
public:
    void dfs(int i,int j,vector<vector<int>> &grid)
    {
        int dx[] = {1,0,-1,0};
        int dy[] = {0,1,0,-1};
        if(i < 0 or i >= grid.size()or j < 0 or j >= grid[0].size() or grid[i][j] != 1)
        {
            return;
        }
        grid[i][j] = 2;
        for(int k = 0; k < 4; k++)
        {
            int nx = i+dx[k];
            int ny = j+dy[k];
            dfs(nx,ny,grid);
        }
    }
    int connComp(vector<vector<int>> grid)
    {
        int r = 0;
        for(int i = 0; i < grid.size(); i++)
        {
            for(int j = 0; j < grid[i].size(); j++)
            {
                if(grid[i][j] == 1)
                {
                    dfs(i,j,grid);
                    r++;
                }
            }
        }
        return r;
    }
    int minDays(vector<vector<int>>& grid) 
    {
        int res = 0;
        int r = connComp(grid);
        if(r > 1)
        {
            return 0;
        }
        for(int i = 0; i < grid.size(); i++)
        {
            for(int j = 0; j < grid[i].size(); j++)
            {
                if(grid[i][j] == 1)
                {
                    grid[i][j] = 0;
                    int p = connComp(grid);
                    if(p > 1)
                        return 1;
                    if(p == 0)
                        return 1;
                    grid[i][j] = 1;
                }
            }
        }
        return 2;
    }
};