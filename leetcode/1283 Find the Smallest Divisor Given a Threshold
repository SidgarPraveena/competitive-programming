class Solution {
    public:
      int calculate(vector<int>nums,  int divisor) {int numsSize=nums.size();
        int sum = 0;
        for (int i=0; i<numsSize; i++) {
            sum += ceil(nums[i]*1.0/divisor);
        }
        return sum;
    }

    int smallestDivisor(vector<int>&nums,  int threshold){
        ios_base::sync_with_stdio(0);
        cin.tie(NULL);
        int numsSize=nums.size();
        int lo = 1, hi = nums[numsSize-1];

        // Binary search to reduce time complexity
        while (lo <= hi) {
            int mid = (lo + hi)/2;
            int curr = calculate(nums, mid);

            if (curr > threshold) 
                lo = mid+1;
            else
                hi = mid-1;
        }

        return lo;
    }
};