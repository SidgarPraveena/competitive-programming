class Solution {
public:
    
    int minCost(vector<vector<int>>& grid) 
    {
        int R = grid.size(), C = grid[0].size();
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        pq.push({0,0});
        vector<vector<int>> cost(R, vector<int>(C, INT_MAX));
        cost[0][0] = 0;
        vector<vector<bool>> visited(R, vector<bool>(C, false));
        visited[0][0] = true;
        int dx[] = {0,0,0,1,-1};
        int dy[] = {0,1,-1,0,0};
        while(!pq.empty())
        {
            pair<int,int> p = pq.top();
            pq.pop();
            int x = p.second/1000;
            int y = p.second%1000;
            int c = p.first;
            for(int i = 1; i <= 4; i++)
            {
                int nx = dx[i]+x;
                int ny = dy[i]+y;
                if(nx < 0 or nx >= R or ny < 0 or ny >= C)
                    continue;
                int nc = (i == grid[x][y])?c:c+1;
                if(nc < cost[nx][ny])
                {
                    pq.push({nc,nx*1000+ny});
                    cost[nx][ny] = nc;
                }
            }
        }
        return cost[R-1][C-1];
    }
};