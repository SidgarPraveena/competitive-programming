class MedianFinder {
public:
    /** initialize your data structure here. */
    priority_queue<int> maxH;
    priority_queue<int, vector<int>, greater<int>> minH;
    MedianFinder() 
    {
        
        
    }
    
    void addNum(int num) 
    {
        if(maxH.size() == 0 && minH.size() == 0)
        {
            maxH.push(num);
        }
        else if(maxH.size() > minH.size())
        {
            if(maxH.top() > num)
            {
                minH.push(maxH.top());
                maxH.pop();
                maxH.push(num);
            }
            else
            {
                minH.push(num);
            }
        }
        else
        {
            if(num <= maxH.top())
            {
                maxH.push(num);
            }
            else
            {
                minH.push(num);
                maxH.push(minH.top());
                minH.pop();
            }
        }
    }
    
    double findMedian() 
    {
        if(maxH.size() == minH.size())
            return (maxH.top()+minH.top())/2.0;
        return maxH.top();
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */