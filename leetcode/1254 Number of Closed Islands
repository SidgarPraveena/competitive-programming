class Solution {
    void dfs(int i, int j, vector<vector<int>> &grid)
    {
        if(i<0 || i>= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] != 0)
            return;
        grid[i][j] = 2;
        dfs(i+1,j,grid);
        dfs(i-1,j,grid);
        dfs(i,j+1,grid);
        dfs(i,j-1,grid);
    }
public:
    int closedIsland(vector<vector<int>>& grid) 
    {
        int res = 0;
        if(grid.size() == 0 || grid[0].size() == 0)
            return res;
        int m = grid.size();
        int n = grid[0].size();
        for(int i=0; i<n; i++)
        {
            if(grid[0][i] == 0)
                dfs(0,i,grid);
            if(grid[m-1][i] == 0)
                dfs(m-1,i,grid);
        }
        for(int i=0; i<m; i++)
        {
            if(grid[i][0] == 0)
                dfs(i,0,grid);
            if(grid[i][n-1] == 0)
                dfs(i,n-1,grid);
        }
        for(int i=1;i<grid.size()-1;i++)
        {
            for(int j=1;j<grid[i].size()-1;j++)
            {
                if(grid[i][j] == 0)
                {
                    res++;
                    dfs(i,j,grid);
                }
            }
        }
        return res;
    }
};