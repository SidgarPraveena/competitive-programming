class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int source) 
    {
        int res = INT_MIN;
        vector<int> dist(n+1,INT_MAX);
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        vector<vector<pair<int,int>>> graph(n+1);
        for(int i=0; i<times.size(); i++)
        {
            graph[times[i][0]].push_back({times[i][1],times[i][2]});
        }
        dist[source] = 0;
        pq.push({0,source});
        while(!pq.empty())
        {
            int u = pq.top().second;
            pq.pop();
            for(auto x: graph[u])
            {
                int v = x.first;
                int w = x.second;
                if(dist[v] > dist[u] + w)
                {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v],v});
                }
            }
        }
        for(int i=1; i<=n; i++)
        {
            if(dist[i] == INT_MAX)
                return -1;
            res = max(res, dist[i]);
        }
        return res;
    }
};