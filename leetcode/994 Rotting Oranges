class Solution {
public:
    int orangesRotting(vector<vector<int>>& matrix) 
    {
        int R = matrix.size(), C = matrix[0].size();
        queue<pair<int,pair<int,int>>> q;
        for(int i=0;i<R;i++)
        {
            for(int j=0;j<C;j++)
            {
                if(matrix[i][j] == 2)
                {
                    q.push(make_pair(0,make_pair(i,j)));
                }
            }
        }
        int max_level = INT_MIN;
        while(!q.empty())
        {
            auto curr = q.front();
            q.pop();
            int level = curr.first;
            if(max_level < level)
                max_level = level;
            int x = curr.second.first;
            int y = curr.second.second;
            if(x < R && y+1 < C && matrix[x][y+1] == 1)
            {
                q.push(make_pair(level+1,make_pair(x,y+1)));
                matrix[x][y+1] = 2;
            }
            if(x+1 < R && y < C && matrix[x+1][y] == 1)
            {
                q.push(make_pair(level+1,make_pair(x+1,y)));
                matrix[x+1][y] = 2;
            }
            if(x < R && y-1 >= 0 && matrix[x][y-1] == 1)
            {
                q.push(make_pair(level+1,make_pair(x,y-1)));
                matrix[x][y-1] = 2;
            }
            if(x-1 >= 0 && y < C && matrix[x-1][y] == 1)
            {
                q.push(make_pair(level+1,make_pair(x-1,y)));
                matrix[x-1][y] = 2;
            }
        }
        for(int i=0;i<R;i++)
        {
            for(int j=0;j<C;j++)
            {
                if(matrix[i][j] == 1)
                    return -1;
            }
        }
        if(max_level == INT_MIN)
            return 0;
        return max_level;
        
    }
};

//or
class Solution {
public:
    int orangesRotting(vector<vector<int>>& matrix) 
    {
        int R = matrix.size(), C = matrix[0].size();
        queue<pair<int,int>> q;
        for(int i=0;i<R;i++)
        {
            for(int j=0;j<C;j++)
            {
                if(matrix[i][j] == 2)
                {
                    q.push({i,j});
                }
            }
        }
        int res = 0;
        int dx[] = {1,0,-1,0};
        int dy[] = {0,1,0,-1};
        while(!q.empty())
        {
            int len = q.size();
            while(len--)
            {
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                for(int i = 0; i < 4; i++)
                {
                    int nx = x+dx[i];
                    int ny = y+dy[i];
                    if(nx >= 0 and nx < R and ny >= 0 and ny < C and matrix[nx][ny] == 1)
                    {
                        matrix[nx][ny] = 2;
                        q.push({nx,ny});
                    }
                }
            }
            res++;
        }
        for(int i=0;i<R;i++)
        {
            for(int j=0;j<C;j++)
            {
                if(matrix[i][j] == 1)
                {
                    return -1;
                }
            }
        }
        return res == 0? 0:res-1;
    }
};