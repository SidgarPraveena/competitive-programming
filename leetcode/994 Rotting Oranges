class Solution {
public:
    int orangesRotting(vector<vector<int>>& matrix) 
    {
        int R = matrix.size(), C = matrix[0].size();
        queue<pair<int,pair<int,int>>> q;
        for(int i=0;i<R;i++)
        {
            for(int j=0;j<C;j++)
            {
                if(matrix[i][j] == 2)
                {
                    q.push(make_pair(0,make_pair(i,j)));
                }
            }
        }
        int max_level = INT_MIN;
        while(!q.empty())
        {
            auto curr = q.front();
            q.pop();
            int level = curr.first;
            if(max_level < level)
                max_level = level;
            int x = curr.second.first;
            int y = curr.second.second;
            if(x < R && y+1 < C && matrix[x][y+1] == 1)
            {
                q.push(make_pair(level+1,make_pair(x,y+1)));
                matrix[x][y+1] = 2;
            }
            if(x+1 < R && y < C && matrix[x+1][y] == 1)
            {
                q.push(make_pair(level+1,make_pair(x+1,y)));
                matrix[x+1][y] = 2;
            }
            if(x < R && y-1 >= 0 && matrix[x][y-1] == 1)
            {
                q.push(make_pair(level+1,make_pair(x,y-1)));
                matrix[x][y-1] = 2;
            }
            if(x-1 >= 0 && y < C && matrix[x-1][y] == 1)
            {
                q.push(make_pair(level+1,make_pair(x-1,y)));
                matrix[x-1][y] = 2;
            }
        }
        for(int i=0;i<R;i++)
        {
            for(int j=0;j<C;j++)
            {
                if(matrix[i][j] == 1)
                    return -1;
            }
        }
        if(max_level == INT_MIN)
            return 0;
        return max_level;
        
    }
};