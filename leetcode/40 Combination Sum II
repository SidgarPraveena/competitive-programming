class Solution {
    void combiUtil(vector<int> & candidates, int index, int sum, int target,vector<int> temp, vector<vector<int>> & res)
    {
        if(sum >  target)
            return;
        if(sum == target)
        {
            res.push_back(temp);
            return;
        }
        for(int i = index; i < candidates.size(); )
        {
            temp.push_back(candidates[i]);
            combiUtil(candidates,i+1,sum+candidates[i], target, temp, res);
            temp.pop_back();
            i++;
            while (i > 0 && i < candidates.size() && candidates[i] == candidates[i - 1]) 
            {
                ++i;
            }
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) 
    {
        vector<vector<int>> res;
        vector<int> temp;
        sort(candidates.begin(), candidates.end());
        combiUtil(candidates,0,0,target,temp,res);
        return res;
    }
};