class Solution {
public:
    set<int> s;
    int n;
    void dfs(int &res,vector<vector<pair<int,int>>> &graph,int index)
    {
        if(index >= n || index < 0)
            return;
        s.insert(index);
        for(auto g: graph[index])
        {
            if(s.find(g.first) == s.end())
            {
                res += g.second;
                dfs(res,graph,g.first);
            }
        }
    }
    int minReorder(int N, vector<vector<int>>& connections) 
    {
        n = N;
        vector<vector<pair<int,int>>> graph(n);
        for(int i=0; i<connections.size();i++)
        {
            graph[connections[i][0]].push_back({connections[i][1],1});
            graph[connections[i][1]].push_back({connections[i][0],0});
        }
        int res = 0;
        dfs(res,graph,0);
        return res;
    }
};