class Solution {
    vector<int> friends;
    int find(int v)
    {
        if(friends[v] != v)
            return find(friends[v]);
        return v;
    }
    void do_union(char a, char b)
    {
        int from = a-'a';
        int to = b-'a';
        int x = find(from);
        int y = find(to);
        friends[y] = x;
    }
public:
    bool equationsPossible(vector<string>& equations) 
    {
        friends.resize(26);
        for(int i=0; i<26; i++)
        {
            friends[i] = i;
        }
        stack<int> stk;
        for(int i=0; i<equations.size(); i++)
        {
            if(equations[i][1] == '=')
            {
                do_union(equations[i][0] ,  equations[i][3]);
            }
            else
            {
                stk.push(i);
            }
        }
        while(!stk.empty())
        {
            int top = stk.top();
            int from = equations[top][0]-'a', to = equations[top][3]-'a';
            if(find(from) == find(to))
                return false;
            stk.pop();
        }
        return true;
    }
};