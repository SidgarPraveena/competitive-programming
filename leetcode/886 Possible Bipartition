class Solution {
public:
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) 
    {
        vector<vector<int>> graph(N);
        for(int i = 0; i<dislikes.size();i++)
        {
            graph[dislikes[i][0]-1].push_back(dislikes[i][1]-1);
            graph[dislikes[i][1]-1].push_back(dislikes[i][0]-1);
        }
        vector<int> friends(N+1,-1);
        for(int i=0; i<N; i++)
        {
            if(friends[i] == -1)
            {
                friends[i] = 1;
                queue<int> q;
                q.push(i);
                
                while(!q.empty())
                {
                    int curr = q.front();
                    q.pop();
                    for(auto y : graph[curr])
                    {
                        if(friends[y] == -1)
                        {
                            friends[y] = 1 - friends[curr];
                            q.push(y);
                        }
                        else if(friends[curr] == friends[y])
                            return false;
                    }
                }
            }
        }
        return true;
    }
};