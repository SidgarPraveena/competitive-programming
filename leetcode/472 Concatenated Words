class Solution {
public:
    unordered_map<string , int > mpp ; 
    
    bool canform(string key)
    {
        int n = key.length() ;
        for(int i = 0 ; i < n - 1 ; ++i){
            string pref = "" , suff = "" ; 
            for(int j = 0 ; j <= i ; ++j) pref+=key[j]; 
            for(int j = i + 1 ; j < n ; ++j) suff+=key[j]; 
            if(mpp[pref] > 0 and (mpp[suff] > 0 or canform(suff) == true)) return true; 
        }
        return false; 
    }
    
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        vector<string> ans ; 
        mpp.clear(); 
        if(words.size() == 0) return ans ; 
        for(auto x : words) mpp[x] = 1; 
        for(auto word : words){
            if(canform(word)) ans.push_back(word) ; 
        }
        return ans ;
    }
};