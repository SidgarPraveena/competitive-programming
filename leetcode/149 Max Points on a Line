class Solution {
public:
    int gcd(int a, int b) {
        if (b == 0) return a;
        return gcd(b, a % b);
    }
    
    pair<int, int> slope(vector<int> &p1, vector<int> &p2) {
        int num = p1[1] - p2[1], den = p1[0] - p2[0];
        if (num == 0) return {0, -1};
        if (den == 0) return {-1, 0};
        int g = gcd(abs(num), abs(den));
        if (num < 0) num *= -1, den *= -1;
        return {num / g, den / g};
    }
    
    int maxPoints(vector<vector<int>>& points) {
        const int n = points.size();
        if (n <= 2) return n;
        int res = 2;
        for (int i = 0; i < n; i++) {
            map<pair<int, int>, int> cnt;
            int colliding = 1;
            for (int j = i + 1; j < n; j++) {
                if (points[i] == points[j]) colliding++;
                else cnt[slope(points[i], points[j])]++;
            }
            res = max(res, colliding);
            for (auto &p: cnt) res = max(res, p.second + colliding);
        }
        return res;
    }
};