class Solution {
    void dfs(int i, int j, vector<vector<char>> &board)
    {
        if(i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || board[i][j] != 'O')
            return;
        board[i][j] = 'm';
        dfs(i+1,j,board);
        dfs(i-1,j,board);
        dfs(i,j+1,board);
        dfs(i,j-1,board);
    }
public:
    void solve(vector<vector<char>>& board) 
    {
        if(board.size() == 0 || board[0].size() == 0)
            return;
        int m = board.size();
        int n = board[0].size();
        for(int i=0; i<m; i++)
        {
            if(board[i][n-1] == 'O')
                dfs(i,n-1,board);
            if(board[i][0] == 'O')
                dfs(i,0,board);
        }
        for(int i=0; i<n; i++)
        {
            if(board[m-1][i] == 'O')
                dfs(m-1,i,board);
            if(board[0][i] == 'O')
                dfs(0,i,board);
        }
        
        for(int i=0; i<board.size(); i++)
        {
            for(int j=0; j<board[i].size(); j++)
            {
                if(board[i][j] == 'm')
                    board[i][j] = 'O';
                else if(board[i][j] == 'O')
                    board[i][j] = 'X';
            }
        }
    }
};