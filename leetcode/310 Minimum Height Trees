class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) 
    {
        if(n == 1)
            return {0};
        vector<vector<int>> graph(n);
        for(int i = 0; i < edges.size(); i++)
        {
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
        
        queue<int> q;
        for(int i = 0; i < n; i++)
        {
            if(graph[i].size() == 1)
            {
                q.push(i);
            }
        }
        while(n > 2)
        {
            int p = q.size();
            n -= p;
            for(int k = 0; k < p; k++)
            {
                int front = q.front();
                q.pop();
                for(auto g: graph[front])
                {
                    auto it = find(graph[g].begin(), graph[g].end(), front);
                    graph[g].erase(it);
                    if(graph[g].size() == 1)
                    {
                        q.push(g);
                    }
                }
            }
        }
        vector<int> res;
        while(!q.empty())
        {
            int f = q.front();
            q.pop();
            res.push_back(f);
        }
        return res;
    }
};