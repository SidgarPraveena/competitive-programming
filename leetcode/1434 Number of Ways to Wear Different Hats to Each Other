#define MOD 1000000007 
class Solution {
    int solve(vector<int> capList[], vector<vector<int>> &dp, int allMask, int mask,int i)
    {
        if(mask == allMask)
        {
            return 1;
        }
        if(i > 40)
        {
            return 0;
        }
        
        if(dp[mask][i] != -1)
        {
            return dp[mask][i];
        }
        int ways = 0;
        ways = solve(capList, dp, allMask, mask,i+1);
        int n = capList[i].size();
        for(int p = 0; p < n; p++)
        {
            if(mask & (1 << capList[i][p]))
            {
                continue;
            }
            else
            {
                ways += solve(capList, dp, allMask, (mask|(1 << capList[i][p])), i+1);
                ways %= MOD;
            }
        }
        dp[mask][i] = ways;
        return ways;
    }
public:
    int numberWays(vector<vector<int>>& hats) 
    {
        vector<int> capList[41];
        for(int i = 0; i < hats.size(); i++)
        {
            for(int j = 0; j < hats[i].size(); j++)
            {
                capList[hats[i][j]].push_back(i);
            }
        }
        int n = hats.size();
        int allMask = (1<<n)-1,mask = 0;
        vector<vector<int>> dp(allMask, vector<int>(41,-1));
        int ans = solve(capList, dp, allMask,mask,1);
        return ans%MOD;
    }
};