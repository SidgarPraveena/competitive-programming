class Solution {
public:
    int LIS(vector<int> t,int n)
    {
        if(n == 0 || n == 1)
        {
            return n;
        }
        vector<int> temp;
        temp.push_back(t[0]);
        int len = 1;
        for(int i = 1; i < n; i++)
        {
            if(t[i] < temp[0])
            {
                temp[0] = t[i];
            }
            else if(t[i] > temp[len-1])
            {
                temp.push_back(t[i]);
                len++;
            }
            else
            {
                int index = lower_bound(temp.begin(), temp.end(), t[i])-temp.begin();
                temp[index] = t[i];
            }
        }
        return len;
    }
    int minOperations(vector<int>& target, vector<int>& arr) 
    {
        map<int,int> mp;
        for(int i = 0; i < target.size(); i++)
        {
            mp[target[i]] = i;
        }
        vector<int> t;
        for(int i = 0; i < arr.size(); i++)
        {
            if(mp.find(arr[i]) != mp.end())
            {
                t.push_back(mp[arr[i]]);
            }
        }
        mp.clear();
        return target.size()-LIS(t, t.size());
    }
};