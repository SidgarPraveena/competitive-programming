// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
int spanningTree(int V, int E, vector<vector<int>> &graph);
// Driver code

int main() {
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int> > graph(V, vector<int>(V, INT_MAX));
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            u--, v--;
            graph[u][v] = w;
            graph[v][u] = w;
        }

        cout << spanningTree(V, E, graph) << endl;
    }
    return 0;
}
// } Driver Code Ends


// Function to construct and print MST for
// a graph represented using adjacency
// matrix representation, with V vertices.
// graph[i][j] = weight if edge exits else INT_MAX
int spanningTree(int v, int E, vector<vector<int>> &graph) 
{
    int key[v] , res = 0;
    fill(key,key+v,INT_MAX);
    key[0] = 0;
    bool visit[v];
    fill(visit,visit+v,0);
    
    for(int i=0;i<v;i++)
    {
        int u = -1;
        for(int i=0;i<v;i++)
        {
            if(!visit[i] && (u == -1 || key[u] > key[i]))
                u = i;
        }
        visit[u] = true;
        res = res+key[u];
        for(int j = 0; j<v; j++)
        {
            if(graph[u][j] != INT_MAX && !visit[j])
                key[j] = min(key[j], graph[u][j]);
        }
    }
    return res;
    // code here
}s