#include<bits/stdc++.h>

using namespace std;


 // } Driver Code Ends


/* This function is used to detect a cycle in undirected graph
*  adj[]: array of vectors to represent graph
*  V: number of vertices
*/
bool dfs(vector<int> adj[], bool visited[],int s,int parent)
{
    visited[s]=true;
    for(auto x: adj[s])
    {
        if(visited[x] == false)
        {
            if(dfs(adj,visited,x,s) == true)
            {
                return true;
            }
        }
        else if(x != parent )
        {
            return true;
        }
    }
    return false;
}

bool isCyclic(vector<int> adj[], int V)
{
    bool visited[V]={0};
    for(int i=0;i<V;i++)
    {
        if(visited[i] == false)
        {
            if(dfs(adj,visited,i,-1) == true)
                return true;
        }
    }
    return false;
   // Your code here
}

// { Driver Code Starts.

int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        int V, E;
        cin>>V>>E;
        
        // array of vectors to represent graph
        vector<int> adj[V];
        
        int u, v;
        for(int i=0;i<E;i++)
        {
            cin>>u>>v;
            
            // adding edge to the graph
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        cout << isCyclic(adj, V)<<endl;

    }
}
  // } Driver Code Ends