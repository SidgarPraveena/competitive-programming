// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// Position this line where user code will be pasted.
int countPaths(list<int> g[], int V, int s, int d);
int main() {
    int T;
    cin >> T;
    while (T--) {
        int N, M;
        cin >> N >> M;
        int u, v;
        list <int> *adj = new list <int>[N + 1];
        while (M--) {
            cin >> u >> v;
            adj[u].push_back (v);
        }
        int s, e;
        cin >> s >> e;
        cout << countPaths(adj, N, s, e) << endl;
    }
    return 0;
}// } Driver Code Ends


// The Graph structure is as folows
/*
g : Adjacency list of the graph
s : source node
d : destination node
V : number of vertices
*/
void dfs_util(list<int> g[],int source,int destination,int &res,bool visited[])
{
    visited[source] = true;
    if(source == destination)
    {
        res++;
    }
    for(auto x: g[source])
    {
        if(visited[x] == false)
        {
            dfs_util(g,x,destination,res,visited);
            visited[x] = false;
        }
    }
}
// Function to find paths between 2 nodes
int countPaths(list<int> g[], int V, int s, int d) 
{
    bool visited[V+1] = {0};
    int res = 0;
    dfs_util(g,s,d,res,visited);
    return res;
    // Your code here
}