// { Driver Code Starts
// Program to find the maximum profit job sequence from a given array 
// of jobs with deadlines and profits 
#include<bits/stdc++.h>
using namespace std; 

// A structure to represent a job 
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
}; 


 // } Driver Code Ends


// Prints minimum number of platforms reqquired 
bool myComp(Job a,Job b)
{
    return a.profit > b.profit;
}
pair<int,int> JobScheduling(Job arr[], int n) 
{ 
    pair<int,int> res;
    sort(arr,arr+n,myComp);
    int sum = arr[0].profit;
    unordered_set<int> s;
    s.insert(arr[0].dead);
    //cout<<s.size()<<endl;
    for(int i=1 ; i<n;i++)
    {
        for(int j=arr[i].dead ; j>=1 ;j--)
        {
            if(s.find(j) == s.end())
            {
                s.insert(j);
                sum = sum+arr[i].profit;
                break;
            }
        }
    }
    return res= {s.size(),sum};
    // your code here
} 



// { Driver Code Starts.
// Driver program to test methods 
int main() 
{ 
    int t;
    cin >> t;
    
    while(t--){
        int n;
        cin >> n;
        Job arr[n];
        
        for(int i = 0;i<n;i++){
                int x, y, z;
                cin >> x >> y >> z;
                arr[i].id = x;
                arr[i].dead = y;
                arr[i].profit = z;
        }
        pair<int,int> ans = JobScheduling(arr, n);
        cout<<ans.first<<" "<<ans.second<<endl;
    }
	return 0; 
}


  // } Driver Code Ends