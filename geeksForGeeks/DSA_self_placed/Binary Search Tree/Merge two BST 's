// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000

// Tree Node
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};



vector<int> merge(Node *root1,Node *root2);

// Function to Build Tree
Node* buildTree(string str)
{
   // Corner Case
   if(str.length() == 0 || str[0] == 'N')
       return NULL;

   // Creating vector of strings from input
   // string after spliting by space
   vector<string> ip;

   istringstream iss(str);
   for(string str; iss >> str; )
       ip.push_back(str);

   // Create the root of the tree
   Node* root = new Node(stoi(ip[0]));

   // Push the root to the queue
   queue<Node*> queue;
   queue.push(root);

   // Starting from the second element
   int i = 1;
   while(!queue.empty() && i < ip.size()) {

       // Get and remove the front of the queue
       Node* currNode = queue.front();
       queue.pop();

       // Get the current node's value from the string
       string currVal = ip[i];

       // If the left child is not null
       if(currVal != "N") {

           // Create the left child for the current node
           currNode->left = new Node(stoi(currVal));

           // Push it to the queue
           queue.push(currNode->left);
       }

       // For the right child
       i++;
       if(i >= ip.size())
           break;
       currVal = ip[i];

       // If the right child is not null
       if(currVal != "N") {

           // Create the right child for the current node
           currNode->right = new Node(stoi(currVal));

           // Push it to the queue
           queue.push(currNode->right);
       }
       i++;
   }

   return root;
}



int main() {

   int t;
   string tc;
   getline(cin, tc);
   t=stoi(tc);
   while(t--)
   {
        string s; 
       getline(cin, s);
       Node* root1 = buildTree(s);

       getline(cin, s);
       Node* root2 = buildTree(s);
    
       // getline(cin, s);

       vector<int> vec = merge(root1, root2);
       for(int i=0;i<vec.size();i++)
            cout << vec[i] << " ";
        cout << endl;
       ///cout<<"~"<<endl;
   }
   return 0;
}// } Driver Code Ends


/* The structure of Node is

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};*/

// Return a integer of integers having all the nodes in both the BSTs in a sorted order.
void getInorder(Node *root,queue<int> &in)
{
    if(root == NULL)
        return;
    getInorder(root->left,in);
    in.push(root->data);
    getInorder(root->right,in);
    
}
void merge_util(queue<int> q1,queue<int> q2,vector<int> &res)
{
    while(!q1.empty() && !q2.empty())
    {
        int l = q1.front();
        int r = q2.front();
        if(l < r)
        {
            res.push_back(l);
            q1.pop();
        }
        else
        {
            res.push_back(r);
            q2.pop();
        }
    }
    while(!q1.empty())
    {
        int l = q1.front();
        q1.pop();
        res.push_back(l);
    }
    while(!q2.empty())
    {
        int r = q2.front();
        q2.pop();
        res.push_back(r);
    }
}
vector<int> merge(Node *root1, Node *root2)
{
    queue<int> in1,in2;
    vector<int> res;
    getInorder(root1,in1);
    getInorder(root2,in2);
    merge_util(in1,in2,res);
    return res;
}