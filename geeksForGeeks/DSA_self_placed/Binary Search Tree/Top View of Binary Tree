// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    struct Node *left;
    struct Node *right;

    Node(int x){
        data = x;
        left = NULL;
        right = NULL;
    }
};

void topView(struct Node *root);


int main()
{
    int t;cin>>t;
    while(t--)
    {
        int n,i,k;
        cin>>n;
        i=n;

        Node* root=NULL;
        queue <Node*> q;
        while(i>0)
        {
            int a,b;
            char c;
            cin>> a >> b >> c;
            if(!root){
                root = new Node(a);
                q.push(root);
            }
            Node* pick = q.front();
            q.pop();

            if(c == 'L'){
                pick->left = new Node(b);
                q.push( pick->left );
            }
            cin>> a >> b >> c;
            if(c == 'R'){
                pick->right = new Node(b);
                q.push( pick->right );
            }
            i-=2;
        }
//        inorder(root);
//        cout<<endl;
        topView(root);
        cout << endl;
    }
    return 0;
}




// } Driver Code Ends


//Structure of binary tree
/*struct Node
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/
// function should print the topView of the binary tree
void topView(struct Node *root)
{
    map<int,int> mp;
    queue<pair<Node *,int>> q;
    q.push({root,0});
    while(q.empty() == false)
    {
        auto p = q.front();
        Node *curr = p.first;
        int hd = p.second;
        //mp[hd].push_back(curr->data);
        if(mp.find(hd) == mp.end())
        {
            mp[hd] = curr->data;
        }
        q.pop();
        if(curr->left != NULL)
            q.push({curr->left,hd-1});
        if(curr->right != NULL)
            q.push({curr->right,hd+1});
    }
    for(auto x: mp)
    {
        cout<<x.second<<" ";
    }
}


