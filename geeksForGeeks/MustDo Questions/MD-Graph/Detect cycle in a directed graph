// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


/*  Function to check if the given graph contains cycle
*   V: number of vertices
*   adj[]: representation of graph
*/
bool dfs(vector<int> adj[], bool visited[], bool recStk[],int s)
{
    visited[s]=true;
    recStk[s]=true;
    for(auto x: adj[s])
    {
        if(visited[x] == false)
        {
            if(dfs(adj,visited,recStk,x) ==true)
            {
                return true;
            }
        }
        else if(recStk[x] == true)
        {
            return true;
        }
    }
    recStk[s]=false;
    return false;
}
bool isCyclic(int V, vector<int> adj[])
{
    bool visited[V]={0};
    bool recStk[V]={0};
    for(int i=0;i<V;i++)
    {
        if(visited[i] ==  false)
        {
            if(dfs(adj,visited,recStk,i) == true)
                return true;
        }
    }
    return false;
    // Your code here
}

// { Driver Code Starts.

int main() {
	
	int t;
	cin >> t;
	
	while(t--){
	    
	    int v, e;
	    cin >> v >> e;
	    
	    vector<int> adj[v];
	    
	    for(int i =0;i<e;i++){
	        int u, v;
	        cin >> u >> v;
	        adj[u].push_back(v);
	    }
	    
	    cout << isCyclic(v, adj) << endl;
	    
	}
	
	return 0;
}  // } Driver Code Ends