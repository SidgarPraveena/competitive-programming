// { Driver Code Starts
#include<bits/stdc++.h>


#define N 105
using namespace std;

int *mergeKArrays(int arr[][N],int k);

void printArray(int arr[], int size)
{
for (int i=0; i < size; i++)
	cout << arr[i] << " ";
}

int main()
{
	int t;
	cin>>t;
	while(t--){
	    int k;
	    cin>>k;
	    int arr[N][N];
	    for(int i=0; i<k; i++){
	        for(int j=0; j<k; j++)
	        {
	            cin>>arr[i][j];
	        }
	    }
	int *output = mergeKArrays(arr, k);
	printArray(output, k*k);
	cout<<endl;
}
	return 0;
}// } Driver Code Ends


// your task is tocomplete this function
// function should return an pointer to output array int*
// of size k*k
struct triplet
{
    int val,arrPos,valPos;
    triplet(int v,int ap,int vp)
    {
        val = v;
        arrPos = ap;
        valPos = vp;
    }
};
struct compFunc
{
    bool operator()(triplet &t1, triplet &t2)
    {
        return t1.val>t2.val;
    }
};
int *mergeKArrays(int arr[][N], int k)
{
    static int res[10000];
    int z=0;
    priority_queue<triplet,vector<triplet>,compFunc> pq;
    for(int i=0;i<k;i++)
    {
        triplet t(arr[i][0],i,0);
        pq.push(t);
    }
    while(pq.empty() == false)
    {
        triplet curr=pq.top();
        pq.pop();
        res[z++]=curr.val;
        int ap=curr.arrPos;
        int vp=curr.valPos;
        if(vp+1 < k)
        {
            triplet t(arr[ap][vp+1],ap,vp+1);
            pq.push(t);
        }
    }
    return res;
//code here
}