The C++ standard library contains the following functions that are based on binary search and work in logarithmic time:
• lower_bound returns a pointer to the first array element whose value is at least x.
• upper_bound returns a pointer to the first array element whose value is larger than x.
• equal_range returns both above pointers.

The functions assume that the ARRAY IS SORTED. If there is no such element, the pointer points to the element after the last array element.
For example, the following code finds out whether an array contains an element with value x:
			auto k = lower_bound(array,array+n,x)-array;
			if (k < n && array[k] == x) 
			{
				// x found at index k
			}
The following code counts the number of elements whose value is x:
			auto a = lower_bound(array, array+n, x);
			auto b = upper_bound(array, array+n, x);
			cout << b-a << "\n";
Using equal_range, the code becomes shorter:
			auto r = equal_range(array, array+n, x);
			cout << r.second-r.first << "\n";

