A dynamic array is an array whose size can be changed during the execution of the program.
The most popular dynamic array in C++ is the vector structure, which can be used almost like an ordinary array.
The following code creates an empty vector and adds three elements to it:
			vector<int> v;
			v.push_back(3); // [3]
			v.push_back(2); // [3,2]
			v.push_back(5); // [3,2,5]

The elements can be accessed like in an ordinary array:
			cout << v[0] << "\n"; // 3
			cout << v[1] << "\n"; // 2
			cout << v[2] << "\n"; // 5

The function size returns the number of elements in the vector. The following code iterates through the vector and prints all elements in it:
			for (int i = 0; i < v.size(); i++) 
			{
				cout << v[i] << "\n";
			}

A shorter way to iterate through a vector is as follows:
			for (auto x : v) 
			{
				cout << x << "\n";
			}

The function back returns the last element in the vector, and the function pop_back removes the last element:
			vector<int> v;
			v.push_back(5);
			v.push_back(2);
			cout << v.back() << "\n"; // 2
			v.pop_back();
			cout << v.back() << "\n"; // 5

Code to create vectors:
method 1:
			vector<int> v = {2,4,2,5,1};
method 2:
			vector<int> v(10);   // size 10, initial value 0
method 3:
			vector<int> v(10, 5);  // size 10, initial value 5


