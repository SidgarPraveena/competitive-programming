Many functions in the C++ standard library operate with iterators. 
An iterator is a variable that points to an element in a data structure.
The often used iterators BEGIN and END define a range that contains all elements in a data structure. 
1) The iterator begin points to the first element in the data structure. 
2) The iterator end points to the position after the last element. 
			The situation looks as follows:
			{ 3, 4, 6, 8, 12, 13, 14, 17 }
			  ↑                        ↑
			s.begin()                 s.end()
Note the asymmetry in the iterators: s.begin() points to an element in the data structure, while s.end() points outside the data structure. 
Thus, the range defined by the iterators is half-open.

Iterators used with vector:
			sort(v.begin(), v.end());
			reverse(v.begin(), v.end());
			random_shuffle(v.begin(), v.end());

These functions can also be used with an ordinary array. 
In this case, the functions are given pointers to the array instead of iterators:
			sort(a, a+n);
			reverse(a, a+n);
			random_shuffle(a, a+n);

SET ITERATORS

Iterators are often used to access elements of a set. 
The following code creates an iterator it that points to the smallest element in a set:
			set<int>::iterator it = s.begin();

A shorter way to write the code is as follows:
			auto it = s.begin();

The element to which an iterator points can be accessed using the * symbol. 
For example, the following code prints the first element in the set:
			auto it = s.begin();
			cout << *it << "\n";

Iterators can be moved using the operators ++ (forward) and -- (backward), meaning that the iterator moves to the next or previous element in the set.
The following code prints all the elements in increasing order:
			for (auto it = s.begin(); it != s.end(); it++) 
			{
				cout << *it << "\n";
			}

The function find(x) returns an iterator that points to an element whose value is x. 
However, if the set does not contain x, the iterator will be end.
			auto it = s.find(x);
			if (it == s.end()) 
			{
				// x is not found
			}			
	
The function lower_bound(x) returns an iterator to the smallest element in the set whose value is at least x.
The function upper_bound(x) returns an iterator to the smallest element in the set whose value is larger than x. 
In both functions, if such an element does not exist, the return value is end. 
These functions are NOT SUPPORTED BY THE UNORDERED_SET structure which does not maintain the order of the elements.