As a first example, we consider a problem where we are given a set of coins and our task is to form a sum of money n using the coins. 
The values of the coins are coins = {c1, c2,..., ck}, and each coin can be used as many times we want. 
What is the minimum number of coins needed?

******************************************************************************************************************************************

METHOD 1
GREEDY SOLUTION

A simple greedy algorithm to the problem always selects the largest possible coin, until the required sum of money has been constructed.
For example, if the coins are the euro coins (in cents)
			{1,2,5,10,20,50,100,200}
and n = 520, we need at least four coins. 
The optimal solution is to select coins 200+200+100+20 whose sum is 520.
Using greedy we dont get optimal solution.

******************************************************************************************************************************************

METHOD 2
DYNAMIC PROGRAMMING (using memoization)

The idea in dynamic programming is to formulate the problem recursively so that the solution to the problem can be calculated from solutions to smaller subproblems.
Let solve(x) denote the minimum number of coins required for a sum x.
The values of the function depend on the values of the coins. 
For example, if coins = {1,3,4}, the first values of the function are as follows:
			solve(0) = 0
			solve(1) = 1
			solve(2) = 2
			solve(3) = 1
			solve(4) = 1
			solve(5) = 2
			solve(6) = 2
			solve(7) = 2
			solve(8) = 2
			solve(9) = 3
			solve(10) = 3
For example, solve(10) = 3, because at least 3 coins are needed to form the sum 10. The optimal solution is 3+3+4 = 10.
The essential property of solve is that its values can be recursively calculated from its smaller values. The idea is to focus on the first coin that we choose for the sum. 
For example, in the above scenario, the first coin can be either 1, 3 or 4. 
If we first choose coin 1, the remaining task is to form the sum 9 using the minimum number of coins, which is a subproblem of the original problem.
Of course, the same applies to coins 3 and 4. Thus, we can use the following recursive formula to calculate the minimum number of coins:
			solve(x) = min(solve(x−1)+1,
						solve(x−3)+1,
						solve(x−4)+1)
The base case of the recursion is solve(0) = 0, because no coins are needed to form an empty sum. 

CODE

#include<iostream>
#include<vector>
using namespace std;
int main()
{
	int n,ele,sum;
	vector<int> coins;
	cout<<"How many diff coins: ";
	cin>>n;
	vector<int> dp(n,0);
	for(int i=0;i<n;i++)
	{
		cin>>ele;
		coins.push_back(ele);
	}
	cout<<"Sum to be find: ";
	cin>>sum;
	int val;
	for(int i=1;i<=sum;i++)
	{
		dp[i]=0;
		val=INT_MAX;
		for(int j=0;j<n;j++)
		{
			if(i-coins[j] >= 0)
			{
				val=min(val,1+dp[i-coins[j]]);
				dp[i]=val;
			}
		}
	}
	for(int i=0;i<=sum;i++)
	{
		cout<<dp[i]<<" ";
	}
	return 0;
}

******************************************************************************************************************************************

METHOD 3
USING RECURSION

CODE

#include<iostream>
#include<vector>
using namespace std;
int coinProblem(int x,vector<int> coins) 
{
	if (x < 0) 
		return INT_MAX-5;
	if (x == 0) 
		return 0;
	int best = INT_MAX-5;
	for (int i=0;i<coins.size();i++) 
	{
		best = min(best, coinProblem(x-coins[i],coins)+1);
	}
	return best;
}
int main()
{
	int n,ele,sum;
	vector<int> coins;
	cout<<"How many diff coins: ";
	cin>>n;
	vector<int> dp(n,0);
	for(int i=0;i<n;i++)
	{
		cin>>ele;
		coins.push_back(ele);
	}
	cout<<"Sum to be find: ";
	cin>>sum;
	cout<<coinProblem(sum,coins);
	return 0;
}


******************************************************************************************************************************************

COUNTING THE NUMBER OF SOLUTIONS

Let us now consider another version of the coin problem where our task is to calculate the total number of ways to produce a sum x using the coins. 
For example, if coins = {1,3,4} and x = 5, there are a total of 6 ways:
			• 1+1+1+1+1
			• 1+1+3
			• 1+3+1
			• 3+1+1
			• 1+4
			• 4+1

#include<iostream>
#include<vector>
using namespace std;
int main()
{
	int n,ele,sum;
	vector<int> coins;
	cout<<"How many diff coins: ";
	cin>>n;

	for(int i=0;i<n;i++)
	{
		cin>>ele;
		coins.push_back(ele);
	}
	cout<<"Sum to be find: ";
	cin>>sum;
	vector<int> dp(sum,0);	
	int val;
	dp[0]=1;
	for(int i=1;i<=sum;i++)
	{
		dp[i]=0;
		val=INT_MAX;
		for(int j=0;j<n;j++)
		{
			if(i-coins[j] >= 0)
			{
				dp[i]=dp[i]+dp[i-coins[j]];
			}
		}
	}
	for(int i=0;i<=sum;i++)
	{
		cout<<dp[i]<<" ";
	}
	return 0;
}

******************************************************************************************************************************************
